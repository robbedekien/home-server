version: '3.8'

services:
    plex:
        image: linuxserver/plex:latest
        container_name: plex
        # Using host network mode is often easier for Plex discovery on a local network.
        # Alternatively, you could use bridge mode and map ports:
        ports:
            - '32400:32400/tcp'
            #   - "3005:3005/tcp"
            #   - "1900:1900/udp"
            - '8324:8324/tcp'
            - '32469:32469/tcp'
            - '32410:32410/udp'
            - '32412:32412/udp'
            - '32413:32413/udp'
            - '32414:32414/udp'
        environment:
            # Replace 1000 with your actual user and group ID.
            # Find them by running `id -u` and `id -g` in your terminal.
            - PUID=1026
            - PGID=100
            - VERSION=docker
            # Optional: Claim token for headless setup.
            # Get one from https://www.plex.tv/claim and paste it here if needed.
            # - PLEX_CLAIM=YOUR_CLAIM_TOKEN
        volumes:
            # Persist Plex configuration
            - /volume1/docker/services/plex/config:/config
            # Mount your media libraries (adjust paths if your 'data' dir is elsewhere)
            - /volume1/docker/data/tv:/data/tvshows
            - /volume1/docker/data/movies:/data/movies
            # Add more volumes here for other media types like music or photos
        restart: unless-stopped

    radarr:
        image: linuxserver/radarr:latest
        container_name: radarr
        environment:
            - PUID=1026
            - PGID=100
            - TZ=Etc/UTC
        volumes:
            - /volume1/docker/services/radarr/config:/config
            - /volume1/docker/data/movies:/movies
            - /volume1/docker/downloads:/downloads
        ports:
            - '7878:7878'
        restart: unless-stopped

    sonarr:
        image: linuxserver/sonarr:latest
        container_name: sonarr
        environment:
            - PUID=1026
            - PGID=100
            - TZ=Etc/UTC
        volumes:
            - /volume1/docker/services/sonarr/config:/config
            - /volume1/docker/data/tv:/tv
            - /volume1/docker/downloads:/downloads
        ports:
            - '8989:8989'
        restart: unless-stopped

    prowlarr:
        image: linuxserver/prowlarr:latest
        container_name: prowlarr
        environment:
            - PUID=1026
            - PGID=100
            - TZ=Etc/UTC
        volumes:
            - /volume1/docker/services/prowlarr/config:/config
        ports:
            - '9696:9696'
        restart: unless-stopped

    overseerr:
        image: sctx/overseerr:latest
        container_name: overseerr
        environment:
            - PUID=1026
            - PGID=100
            - TZ=Etc/UTC
        volumes:
            - /volume1/docker/services/overseerr/config:/app/config
        ports:
            - '5055:5055'
        restart: unless-stopped

    qbittorrent:
        image: linuxserver/qbittorrent:latest
        container_name: qbittorrent
        environment:
            - PUID=1026
            - PGID=100
            - TZ=Etc/UTC
            - WEBUI_PORT=8080
        volumes:
            - /volume1/docker/services/qbittorrent/config:/config
            - /volume1/docker/downloads:/downloads
        ports:
            - '8080:8080'
            - '6881:6881'
            - '6881:6881/udp'
        restart: unless-stopped

    threadfin:
        image: fyb3roptik/threadfin:latest
        container_name: threadfin
        ports:
            - 34401:34400
        environment:
            - PUID=1026
            - PGID=100
            - TZ=Etc/UTC
        volumes:
            - /volume1/docker/services/threadfin/config:/config
            - /volume1/docker/data/temp:/tmp/threadfin:rw
        restart: unless-stopped

    nginx-proxy-manager:
        image: 'jc21/nginx-proxy-manager:latest'
        container_name: nginx-proxy-manager
        restart: unless-stopped
        ports:
            # Public HTTP Port:
            - '800:80'
            # Public HTTPS Port:
            - '4430:443'
            # Admin Web Port:
            - '810:81'
        volumes:
            - /volume1/docker/services/nginx-proxy-manager/data:/data
            - /volume1/docker/services/nginx-proxy-manager/letsencrypt:/etc/letsencrypt

    homarr:
        image: ghcr.io/homarr-labs/homarr:latest
        container_name: homarr
        restart: unless-stopped
        ports:
            - '7575:7575'
        volumes:
            - /volume1/docker/services/homarr/configs:/app/data/configs
            - /volume1/docker/services/homarr/icons:/app/public/icons
            - /volume1/docker/services/homarr/data:/app/data/data
        environment:
            - PUID=1026 # Use your user ID
            - PGID=100 # Use your group ID
            - TZ=Etc/UTC # Set your timezone
            - SECRET_ENCRYPTION_KEY=${SECRET_ENCRYPTION_KEY}

    ddns:
        image: favonia/cloudflare-ddns:latest
        container_name: cloudflare-ddns
        # network_mode: host # This bypasses network isolation and makes IPv6 easier (optional; see below)
        restart: always
        user: '1000:1000' # Run the updater with specific user and group IDs (in that order).
        read_only: true # Make the container filesystem read-only (optional but recommended)
        cap_drop: [all] # Drop all Linux capabilities (optional but recommended)
        security_opt: [no-new-privileges:true] # Another protection to restrict superuser privileges (optional but recommended)
        environment:
            - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
            - DOMAINS=home.robbedekien.be,plex.home.robbedekien.be,overseerr.home.robbedekien.be
            - PROXIED=true
            - IP6_PROVIDER=none
